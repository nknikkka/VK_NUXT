import telebot
from telebot import types
import pandas as pd
import threading
import schedule
import time

TOKEN = '7285439243:AAFDtqicqounDbLwzq_ULXLuoSdE_PZ2snk'
bot = telebot.TeleBot(TOKEN)

teacher_subscriptions = {}
student_subscriptions = {}

def get_schedule_from_excel():
    xls = pd.ExcelFile('groups.xlsx', engine='openpyxl')
    if 'schedule' in xls.sheet_names:
        schedule_df = pd.read_excel(xls, sheet_name='schedule')
    else:
        raise ValueError("Worksheet named 'schedule' not found")

    if 'substitutions' in xls.sheet_names:
        substitutions_df = pd.read_excel(xls, sheet_name='substitutions')
    else:
        substitutions_df = pd.DataFrame()

    return schedule_df, substitutions_df

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    greeting_message = ("–ü—Ä–∏–≤—ñ—Ç! üëã\n"
                        "–Ø ‚Äî —Ç–≤–æ—è –ø—Ä–∞–≤–∞ —Ä—É–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É, –≤ –º–µ–Ω–µ —Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, "
                        "—è–∫—ñ –≤ —Ç–µ–±–µ –ø–∞—Ä–∏ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è üòà\n\n"
                        "–•–æ—á–µ—à –±—ñ–ª—å—à–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –±–æ—Ç–∞?"
                        "–ó–Ω–∞—î—à, —è–∫ –π–æ–≥–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?"
                        "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫? \n"
                        "–ü–∏—à–∏ @Kyluk_Veronika, –Ω–µ —Å–æ—Ä–æ–º—Å—è ")
    bot.send_message(chat_id, greeting_message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    register_button = types.KeyboardButton('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è')
    news_button = types.KeyboardButton('–ù–æ–≤–∏–Ω–∏ üåê')
    social_media_button = types.KeyboardButton('–°–æ—Ü-–ú–µ—Ä–µ–∂—ñ üì≤')
    markup.add(register_button, news_button, social_media_button)
    bot.send_message(chat_id, "–í–∏–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–∏–Ω–∏ üåê')
def news(message):
    chat_id = message.chat.id
    news_message = "–û—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" \
                   "–ù–æ–≤–∏–Ω–∏ 1\n" \
                   "–ù–æ–≤–∏–Ω–∏ 2\n" \
                   "–ù–æ–≤–∏–Ω–∏ 3"
    bot.send_message(chat_id, news_message)

@bot.message_handler(func=lambda message: message.text == '–°–æ—Ü-–ú–µ—Ä–µ–∂—ñ üì≤')
def social_media(message):
    chat_id = message.chat.id
    social_message = "–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñüá∫üá¶ :\n" \
                     "Instagram:https://www.instagram.com/vifk_nukht/\n" \
                     "Facebook: https://www.facebook.com/groups/385020108575468\n" \
                     "Telegram: https://t.me/vcnuftvn"
    bot.send_message(chat_id, social_message)

@bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è')
def register(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    student_button = types.KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç')
    teacher_button = types.KeyboardButton('–í–∏–∫–ª–∞–¥–∞—á')
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(student_button, teacher_button, back_button)
    bot.send_message(chat_id, "–î–ª—è –ø–æ—á–∞—Ç–∫—É, —Å–∫–∞–∂–∏ –º–µ–Ω—ñ, —Ö—Ç–æ —Ç–∏ üòº:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text

    if text == '–í–∏–∫–ª–∞–¥–∞—á':
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_teacher_schedule)
        reset_to_main_menu(chat_id)
    elif text == '–°—Ç—É–¥–µ–Ω—Ç':
        bot.send_message(chat_id,
                         "–í–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø—É —É —Ñ–æ—Ä–º–∞—Ç—ñ '–∫—É—Ä—Å-–≥—Ä—É–ø–∞-–Ω–æ–º–µ—Ä', –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '1-–ê–ú-1' –∞–±–æ '3-–û–ö-1'.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_group)
        reset_to_main_menu(chat_id)
    elif text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        bot.send_message(chat_id, "–ù–µ —Ä–æ–∑—É–º—ñ—é —Ç–µ–±–µ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")

def reset_to_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    register_button = types.KeyboardButton('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è')
    news_button = types.KeyboardButton('–ù–æ–≤–∏–Ω–∏ üåê')
    social_media_button = types.KeyboardButton('–°–æ—Ü-–ú–µ—Ä–µ–∂—ñ üì≤')
    markup.add(register_button, news_button, social_media_button)

def get_teacher_schedule(message):
    chat_id = message.chat.id
    surname = message.text.strip()

    xls = pd.ExcelFile('groups.xlsx', engine='openpyxl')
    schedule_df = pd.read_excel(xls, sheet_name='schedule')

    print(f"Teacher surname entered: {surname}")
    # Check if the surname exists in any of the teacher columns
    teacher_schedule = schedule_df[
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á1'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á1_1'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á2'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á2_2'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á3'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á3_3'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á4'] == surname) |
        (schedule_df['–í–∏–∫–ª–∞–¥–∞—á4_4'] == surname)
    ]

    if teacher_schedule.empty:
        bot.send_message(chat_id, f"–í–∏–±–∞—á—Ç–µ, —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ {surname} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        send_teacher_schedule(chat_id, teacher_schedule, surname)
        teacher_subscriptions[chat_id] = surname  # –¥–æ–¥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤

def send_teacher_schedule(chat_id, teacher_schedule, surname):
    schedule_message = f"–†–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ {surname}:\n\n"
    days = teacher_schedule['–î–µ–Ω—å —Ç–∏–∂–Ω—è'].unique()
    for day in days:
        day_schedule = teacher_schedule[teacher_schedule['–î–µ–Ω—å —Ç–∏–∂–Ω—è'] == day]
        schedule_message += f"{day}:\n"
        for index, row in day_schedule.iterrows():
            for i in range(1, 5):
                if f'–í–∏–∫–ª–∞–¥–∞—á{i}' in row and row[f'–í–∏–∫–ª–∞–¥–∞—á{i}'] == surname:
                    pair = row[f'–ü–∞—Ä–∞ {i}']
                    group = row['–ì—Ä—É–ø–∞']
                    schedule_message += f"–ü–∞—Ä–∞ {i} - {pair} ({group})\n"
                elif f'–í–∏–∫–ª–∞–¥–∞—á{i}_1' in row and row[f'–í–∏–∫–ª–∞–¥–∞—á{i}_1'] == surname:
                    pair = row[f'–ü–∞—Ä–∞ {i}_1']
                    group = row['–ì—Ä—É–ø–∞']
                    schedule_message += f"–ü–∞—Ä–∞ {i} - {pair} ({group})\n"
        schedule_message += "\n"

    sent_message = bot.send_message(chat_id, schedule_message)
    bot.pin_chat_message(chat_id, sent_message.message_id)

def get_group(message):
    chat_id = message.chat.id
    text = message.text.strip()
    schedule_df, _ = get_schedule_from_excel()
    if text in schedule_df['–ì—Ä—É–ø–∞'].values:
        student_subscriptions[chat_id] = text
        bot.send_message(chat_id, f"–¢–∏ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ –≥—Ä—É–ø—É '{text}'. –û—Å—å —Ç–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:")
        send_weekly_schedule(chat_id, text)
    else:
        bot.send_message(chat_id,
                         f"–ì—Ä—É–ø–∞ '{text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.")

def send_weekly_schedule(chat_id, group):
    schedule_df, _ = get_schedule_from_excel()
    schedule = schedule_df[schedule_df['–ì—Ä—É–ø–∞'] == group]
    schedule_message = f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–∏ {group}:\n\n"

    for day in schedule['–î–µ–Ω—å —Ç–∏–∂–Ω—è'].unique():
        day_schedule = schedule[schedule['–î–µ–Ω—å —Ç–∏–∂–Ω—è'] == day]
        schedule_message += f"{day}:\n"

        for para_num in range(1, 5):
            subjects = []
            teachers = []

            for i in range(5):
                subject_col = f'–ü–∞—Ä–∞ {para_num}' if i == 0 else f'–ü–∞—Ä–∞ {para_num}_{i}'
                teacher_col = f'–í–∏–∫–ª–∞–¥–∞—á{para_num}' if i == 0 else f'–í–∏–∫–ª–∞–¥–∞—á{para_num}_{i}'

                if subject_col in day_schedule.columns and teacher_col in day_schedule.columns:
                    subject = day_schedule[subject_col].values[0]
                    teacher = day_schedule[teacher_col].values[0]

                    if pd.notna(subject) and subject != '-':
                        subjects.append(str(subject))
                    if pd.notna(teacher) and teacher != '-':
                        teachers.append(str(teacher))

            if subjects:
                schedule_message += f"–ü–∞—Ä–∞ {para_num} - {'/'.join(subjects)} ({'/'.join(teachers)})\n"
            else:
                schedule_message += f"–ü–∞—Ä–∞ {para_num} - -\n"

        schedule_message += "\n"

    sent_message = bot.send_message(chat_id, schedule_message)
    bot.pin_chat_message(chat_id, sent_message.message_id)

def send_teacher_substitution_updates():
    schedule_data, substitutions_df = get_schedule_from_excel()
    if substitutions_df is not None and not substitutions_df.empty:
        for chat_id, surname in teacher_subscriptions.items():
            teacher_substitutions = substitutions_df[
                (substitutions_df['–í–∏–∫–ª–∞–¥–∞—á1'] == surname) |
                (substitutions_df['–í–∏–∫–ª–∞–¥–∞—á2'] == surname) |
                (substitutions_df['–í–∏–∫–ª–∞–¥–∞—á3'] == surname) |
                (substitutions_df['–í–∏–∫–ª–∞–¥–∞—á4'] == surname)
            ]

            if not teacher_substitutions.empty:
                for index, substitution in teacher_substitutions.iterrows():
                    date_str = pd.to_datetime(substitution['–î–∞—Ç–∞']).strftime('%Y-%–º-%d')
                    substitution_message = f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ {surname} –Ω–∞ {date_str}:\n"

                    for i in range(1, 5):
                        teacher_col = f'–í–∏–∫–ª–∞–¥–∞—á{i}'
                        pair_col = f'–ü–∞—Ä–∞ {i}'

                        if teacher_col in substitution and substitution[teacher_col] == surname:
                            pair = substitution[pair_col]
                            if pair != '-':
                                substitution_message += f"–ü–∞—Ä–∞ {i}: {pair}\n"

                    if substitution_message:
                        bot.send_message(chat_id, substitution_message)

def send_student_substitution_updates():
    schedule_data, substitutions_df = get_schedule_from_excel()
    if substitutions_df is not None and not substitutions_df.empty:
        for chat_id, group in student_subscriptions.items():
            group_substitutions = substitutions_df[substitutions_df['–ì—Ä—É–ø–∞'] == group]
            if not group_substitutions.empty:
                for index, substitution in group_substitutions.iterrows():
                    date_str = pd.to_datetime(substitution['–î–∞—Ç–∞']).strftime('%Y-%–º-%d')
                    substitution_message = f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏ {group} –Ω–∞ {date_str}:\n"
                    for i in range(1, 5):
                        pair = substitution[f'–ü–∞—Ä–∞ {i}']
                        if pair != '-':
                            substitution_message += f"–ü–∞—Ä–∞ {i}: {pair}\n"
                    if substitution_message:
                        bot.send_message(chat_id, substitution_message)

def schedule_daily_updates():
    schedule.every().day.at("21:03").do(send_teacher_substitution_updates)
    schedule.every().day.at("21:03").do(send_student_substitution_updates)
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=schedule_daily_updates, daemon=True).start()

bot.remove_webhook()
bot.infinity_polling()
